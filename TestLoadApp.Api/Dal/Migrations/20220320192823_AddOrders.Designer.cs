// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestLoadApp.Api.Dal;

#nullable disable

namespace TestLoadApp.Api.Dal.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220320192823_AddOrders")]
    partial class AddOrders
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ea20d4bd-431e-4ccf-b61d-b20db06cf362",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a35abf4e-d842-48df-a8a5-56f4605da33f",
                            Email = "BillieRigby@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELm60pFnkktWmrWsxXgrFrPK5ycwEFS85Ai4bNwQ82D6SkL0WsM0z7Ioq7ejPBIK/Q==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2ddb3ac-bae0-4af7-932b-8dd2438c06e4",
                            TwoFactorEnabled = false,
                            UserName = "BillieRigby"
                        },
                        new
                        {
                            Id = "c589cf61-a6ee-4b5f-93ed-7fc027e9cc95",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "deb9d35d-2e11-4b99-8bcb-ba113a200151",
                            Email = "FerneChung@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEG0CCPnj7QFptbCYltCDGT40gagzsedw1wxhObWqSzsNT+uC9SSTPOpRtLKb5Kec5Q==",
                            PhoneNumber = "1234567891",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b63e4239-584f-4f08-863a-93ae41b6d980",
                            TwoFactorEnabled = false,
                            UserName = "FerneChung"
                        },
                        new
                        {
                            Id = "fc007b46-551a-44e5-b26f-ed5070a184ba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e321f766-d92d-4467-b104-592e87f03fd6",
                            Email = "YolandaPaine@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEL5RgvHJx2LeWc9CtvCuuuf0iFV9mV/AsVnzJifsrkdUxeeWObRKRRgWtCEsU007zw==",
                            PhoneNumber = "1234567892",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7fb5dc62-5ef2-4e43-8c46-070a6cb1fb00",
                            TwoFactorEnabled = false,
                            UserName = "YolandaPaine"
                        },
                        new
                        {
                            Id = "b4852bde-7e11-4950-b4e7-f612138df5bd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1ef29ed-88cd-464b-9a60-a07c249cfa83",
                            Email = "MaisyClements@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEK8ZOn1nT1iBa67xfS8q3qhpto17YX45JpvBBUBrQH6acZ7NiMLZ+FiC3b5IjAyL7A==",
                            PhoneNumber = "1234567893",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fdb78b1a-e2fb-4487-9120-5884e9d5b1b9",
                            TwoFactorEnabled = false,
                            UserName = "MaisyClements"
                        },
                        new
                        {
                            Id = "1270a71c-6c48-4ff2-b5cf-7d2282b69ebc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21edce5e-097c-45ba-a59b-3ef6e2c95372",
                            Email = "JacquelineHowarth@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPZecA8CvWcpy0HmAARQmA/xX05F6lazebFRDqCyP7AqyPenNjkZ/N6KdL7NNsQJSQ==",
                            PhoneNumber = "1234567894",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7fdb0a2a-1fe3-4140-bed7-2b67e9cf3017",
                            TwoFactorEnabled = false,
                            UserName = "JacquelineHowarth"
                        },
                        new
                        {
                            Id = "4c4e8205-72ad-431e-921a-ed4599bfa427",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "993212a6-7cc3-49a5-9570-d217ea14653c",
                            Email = "AmeerahYoung@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGuGFF4KTjQVL1+TAXJHwr1jeCfjsZr2OiBxed2p/0BCGpAoHW6okkwEzplS/CSIBQ==",
                            PhoneNumber = "1234567895",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fe91335-526b-46bf-ba1c-d654a409b6f9",
                            TwoFactorEnabled = false,
                            UserName = "AmeerahYoung"
                        },
                        new
                        {
                            Id = "5fa2d163-79bd-4580-abf5-8b6536f239c3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "851886a4-f0f4-4a6c-83c3-d4ae767853fd",
                            Email = "LibertyDuffy@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEHo1SauT4HQLFxf+dbLOetVtX4lTkZTzfxRTmnUKx2mUqkLTsTQE2thkdMoDKjpR+g==",
                            PhoneNumber = "1234567896",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6070ab2-d189-456e-865b-1b7820d01716",
                            TwoFactorEnabled = false,
                            UserName = "LibertyDuffy"
                        },
                        new
                        {
                            Id = "57266d27-1262-4be5-b765-f5674d41300a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d9517e0-469d-4fe5-a5b1-e2c09a5070aa",
                            Email = "ShereenRutledge@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPvnaNV6tfiH9xMTLLzfZ06fvFhCy1otqSSn5KqYOSC7JBOS8drs/DZSupDbCnkFmA==",
                            PhoneNumber = "1234567897",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0024159c-3616-42cf-9b87-aca8161746f4",
                            TwoFactorEnabled = false,
                            UserName = "ShereenRutledge"
                        },
                        new
                        {
                            Id = "3e42c4a0-a872-47a4-abc9-b3cc69b923a9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d0a6f53-4a7d-45eb-8dcb-27c91a5a1e3e",
                            Email = "AnnabelleRowe@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEP/Pn46YZA45joPsTB5cTTQyHGm6CCeUyd1g4gMT0yWqCpOUCQdHgoB47EF7Uc5cIA==",
                            PhoneNumber = "1234567898",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b51685a8-bd12-4ecf-8c01-2b007d5d4ea6",
                            TwoFactorEnabled = false,
                            UserName = "AnnabelleRowe"
                        },
                        new
                        {
                            Id = "8598ab52-ed4c-4c48-8ea6-28f560cd66a8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "834b961e-331f-46de-afaa-fca844a1cc62",
                            Email = "RhiannanPittman@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJ+uLkUIVaeBU9KhqEPRF9DHSGiuus0RljA9/2OXqckwZdUy/xEyZl3OMcCkd2GvZA==",
                            PhoneNumber = "1234567899",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d0b3d3a-3d5e-4217-bdf2-d72d3dc5bbad",
                            TwoFactorEnabled = false,
                            UserName = "RhiannanPittman"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TestLoadApp.Api.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Items")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestLoadApp.Api.Models.Order", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
